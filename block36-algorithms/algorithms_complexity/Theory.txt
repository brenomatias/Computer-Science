 quando nossa fun√ß√£o tiver que lidar com valores de entrada muito grandes, por exemplo: mil valores ao mesmo tempo? Ou quem sabe milh√µes de valores? Nesses casos, a efici√™ncia do que estamos fazendo tornar-se importante e n√≥s, pessoas desenvolvedoras, precisamos ser capazes de lidar com esses cen√°rios!

Voc√™ pode estar se perguntando: "Como saber quais algoritmos s√£o mais eficientes para cada caso?‚Äù ü§î

**** M√©trica Universal para calcular a efici√™ncia de um algoritmo que √© v√°lida para qualquer linguagem e paradigma de programa√ß√£o


O que √© um algoritmo?


"Informalmente, um algoritmo √© qualquer procedimento computacional bem definido que toma algum valor ou conjunto de valores como entrada e produz algum valor ou conjunto de valores como sa√≠da. Portanto, um algoritmo √© uma sequ√™ncia de etapas computacionais que transformam a entrada na sa√≠da" (CLRS - Introduction to Algorithms)


"Um algoritmo √© uma sequ√™ncia de etapas computacionais que transformam a entrada na sa√≠da"
"Um algoritmo √© um conjunto de instru√ß√µes que realizam uma tarefa." 


Algoritmo Correto?

podemos consider√°-lo correto se, e somente se, nos entrega a sa√≠da esperada para todas as entradas, isto √©, ele resolve aquele problema.


COMPLEXIDADE de um algoritmo: A taxa de crescimento do tempo de execu√ß√£o de um algoritmo; quanto maior √© essa taxa, maior √© seu tempo de execu√ß√£o e, portanto, maior sua complexidade.

ORDEM DE COMPLEXIDADE: quantidade de opera√ß√µes que o algoritmo realiza