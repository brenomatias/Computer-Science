def sum_array(numbers):
    sum = 0
    for number in numbers:
        sum += number

    return sum

#  tempo de execu√ß√£o depende do tamanho do array passado por par√¢metro! Quanto maior o tamanho dele, mais tempo o algoritmo gastar√° em sua execu√ß√£o.


# Suponha que, para o array abaixo, o tempo de execu√ß√£o seja `n`
sum_array(array_com_dez_mil_numeros)

# Nesse caso, aqui o tempo de execu√ß√£o vai ser `10 * n`, ou `10n`, j√° que o array √© dez vezes maior que o anterior
sum_array(array_com_cem_mil_numeros)

# J√° esse √© dez mil vezes maior que o primeiro, ent√£o esse aqui executa em `100n`
sum_array(array_com_um_milh√£o_de_numeros)


# Note que conforme aumentamos o valor da entrada, o tempo de execu√ß√£o do algoritmo aumenta proporcionalmente, de acordo com uma taxa

# √â isso que chamamos de complexidade: A taxa de crescimento do tempo de execu√ß√£o de um algoritmo; quanto maior √© essa taxa, maior √© seu tempo de execu√ß√£o e, portanto, maior sua complexidade.


# Ordem de Complexidade nada mais √© do que a representa√ß√£o dessa propor√ß√£o (ou taxa) de crescimento


# A partir de agora, sempre que falarmos sobre a Ordem de Complexidade n√£o iremos nos referir ao tempo em segundos que um algoritmo leva para ser executado, mas sim a quantidade de opera√ß√µes que ele realiza. üôÇ